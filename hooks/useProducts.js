import { useState, useEffect, useMemo } from 'react';
import { supabaseClient } from '@/utils/supabase';

export const useProducts = () => {
    const [builds, setBuilds] = useState([]);
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [searchConfigs, setSearchConfigs] = useState([]);
    const [topDrops, setTopDrops] = useState([]);
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [priceHistory, setPriceHistory] = useState([]);
    const [chartInterval, setChartInterval] = useState('6h');

    // Estados para filtros e ordena√ß√£o
    const [sortBy, setSortBy] = useState('price');
    const [sortOrder, setSortOrder] = useState('asc');
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [selectedWebsites, setSelectedWebsites] = useState([]);

    // Estados para builds
    const [expandedBuildProduct, setExpandedBuildProduct] = useState(null);
    const [buildProductModal, setBuildProductModal] = useState(null);
    const [newBuild, setNewBuild] = useState({
        name: '',
        categories: [],
        auto_refresh: true,
        product_overrides: {},
        product_quantities: {}
    });

    // Estados para configura√ß√µes de busca
    const [configFilters, setConfigFilters] = useState({ category: '', website: '' });
    const [globalSearchToggle, setGlobalSearchToggle] = useState(true);
    const [newSearch, setNewSearch] = useState({
        search_text: '',
        keywordGroups: [''],
        category: '',
        websites: { kabum: false, pichau: false, terabyte: false },
        is_active: true
    });

    // Estados para sistema de oculta√ß√£o
    const [showHiddenProducts, setShowHiddenProducts] = useState(false);
    const [hiddenProducts, setHiddenProducts] = useState([]);
    const [priceLimits, setPriceLimits] = useState([]);
    const [loadingHidden, setLoadingHidden] = useState(false);

    // Estados para sistema de toast notifications
    const [toasts, setToasts] = useState([]);

    // üßÆ NOVA FUN√á√ÉO: Calcular desconto baseado em m√©dia hist√≥rica ponderada
    const calculateWeightedAverageDiscount = async (productId, currentPrice) => {
        try {
            // Buscar TODOS os registros hist√≥ricos do produto, ordenados por data
            const { data: priceRecords } = await supabaseClient
                .from('prices')
                .select('price, check_count, price_changed_at')
                .eq('product_id', productId)
                .order('price_changed_at', { ascending: true }); // Mais antigo primeiro

            if (!priceRecords || priceRecords.length === 0) {
                return {
                    currentPrice,
                    weightedAverage: currentPrice,
                    discountPercent: 0,
                    hasValidHistory: false
                };
            }

            // Encontrar o registro atual (√∫ltimo por data)
            const currentRecord = priceRecords[priceRecords.length - 1];
            const actualCurrentPrice = parseFloat(currentRecord.price);
            const currentCheckCount = currentRecord.check_count || 1;

            console.log(`üìä Calculando desconto para produto ${productId}:`);
            console.log(`   Pre√ßo atual: R$ ${actualCurrentPrice.toFixed(2)} (check_count: ${currentCheckCount})`);

            // Calcular m√©dia hist√≥rica ponderada
            let totalWeightedSum = 0;
            let totalCheckCounts = 0;

            // Para todos os registros ANTERIORES (exceto o atual)
            for (let i = 0; i < priceRecords.length - 1; i++) {
                const record = priceRecords[i];
                const price = parseFloat(record.price);
                const checkCount = Math.max(1, record.check_count || 1);
                
                const weightedValue = price * checkCount;
                totalWeightedSum += weightedValue;
                totalCheckCounts += checkCount;
            }

            // Para o registro ATUAL, usar (check_count - 1) se > 1
            if (currentCheckCount > 1) {
                const currentContributionCount = currentCheckCount - 1;
                const currentWeightedValue = actualCurrentPrice * currentContributionCount;
                totalWeightedSum += currentWeightedValue;
                totalCheckCounts += currentContributionCount;
            }

            // Se n√£o h√° hist√≥rico suficiente, retornar sem desconto
            if (totalCheckCounts === 0) {
                console.log(`   ‚ö†Ô∏è Sem hist√≥rico suficiente para produto ${productId}`);
                return {
                    currentPrice: actualCurrentPrice,
                    weightedAverage: actualCurrentPrice,
                    discountPercent: 0,
                    hasValidHistory: false
                };
            }

            // Calcular m√©dia ponderada
            const weightedAverage = totalWeightedSum / totalCheckCounts;

            // Calcular desconto/aumento
            const discountPercent = ((actualCurrentPrice - weightedAverage) / weightedAverage) * 100;

            console.log(`   üìà Resultado: ${discountPercent >= 0 ? '+' : ''}${discountPercent.toFixed(2)}%`);
            console.log(`   üí∞ Pre√ßo atual: R$ ${actualCurrentPrice.toFixed(2)} vs M√©dia: R$ ${weightedAverage.toFixed(2)}`);

            return {
                currentPrice: actualCurrentPrice,
                weightedAverage,
                discountPercent,
                hasValidHistory: true,
                totalCheckCounts
            };
        } catch (error) {
            console.error(`Error calculating weighted average for product ${productId}:`, error);
            return {
                currentPrice,
                weightedAverage: currentPrice,
                discountPercent: 0,
                hasValidHistory: false
            };
        }
    };

    // Helper para obter token de autentica√ß√£o
    const getAuthHeaders = async () => {
        try {
            const { data: { session } } = await supabaseClient.auth.getSession();
            
            if (session?.access_token) {
                return {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${session.access_token}`
                };
            }
            
            return { 'Content-Type': 'application/json' };
        } catch (error) {
            console.error('Error getting auth token:', error);
            return { 'Content-Type': 'application/json' };
        }
    };

    useEffect(() => {
        if (typeof window === 'undefined') return;

        fetchInitialData();

        const pricesSubscription = supabaseClient
            .channel('price-changes')
            .on('postgres_changes', {
                event: '*', // Escutar INSERT, UPDATE e DELETE
                schema: 'public',
                table: 'prices'
            }, payload => {
                console.log(`üîÑ Realtime: ${payload.eventType} em prices para produto ${payload.new?.product_id}`);
                
                if (payload.eventType === 'INSERT' || payload.eventType === 'UPDATE') {
                    const updatedPrice = parseFloat(payload.new.price);
                    const updatedAt = payload.new.last_checked_at || payload.new.collected_at || payload.new.price_changed_at;
                    
                    setProducts(prev => prev.map(product =>
                        product.id === payload.new.product_id
                            ? { 
                                ...product, 
                                currentPrice: updatedPrice,
                                lastUpdated: updatedAt,
                                // Recalcular change% com o pre√ßo anterior armazenado
                                priceChange: product.previousPrice > 0 
                                    ? ((updatedPrice - product.previousPrice) / product.previousPrice * 100)
                                    : 0
                            }
                            : product
                    ));
                    
                    // Tamb√©m atualizar nas ofertas se necess√°rio
                    setTopDrops(prev => prev.map(product =>
                        product.id === payload.new.product_id
                            ? { 
                                ...product, 
                                currentPrice: updatedPrice,
                                lastUpdated: updatedAt
                            }
                            : product
                    ));
                }
            })
            .subscribe();

        // Cleanup subscription
        return () => {
            if (pricesSubscription) {
                supabaseClient.removeChannel(pricesSubscription);
            }
        };
    }, []);

    const fetchInitialData = async () => {
        if (typeof window === 'undefined') return;

        try {
            console.log('üöÄ Iniciando carregamento otimizado de dados...');
            
            // Buscar builds em paralelo
            const buildsPromise = supabaseClient
                .from('builds')
                .select('*')
                .order('created_at', { ascending: false });

            // Buscar produtos (filtrar ocultos por padr√£o)
            const productsPromise = supabaseClient
                .from('products')
                .select('*')
                .eq('is_hidden', false);

            const [{ data: buildsData }, { data: productsData }] = await Promise.all([
                buildsPromise,
                productsPromise
            ]);

            setBuilds(buildsData || []);
            console.log(`üìÅ ${productsData?.length || 0} produtos encontrados`);

            if (!productsData || productsData.length === 0) {
                setProducts([]);
                setTopDrops([]);
                setLoading(false);
                return;
            }

            // OTIMIZA√á√ÉO: Tentar usar a fun√ß√£o RPC super otimizada primeiro
            console.log(`üìä Tentando busca ultra-otimizada de produtos com pre√ßos...`);
            
            // Tentar usar a fun√ß√£o RPC completa (inclui produtos + pre√ßos em uma query)
            const { data: completeData, error: completeError } = await supabaseClient
                .rpc('get_products_with_latest_prices', { include_hidden: false });

            if (!completeError && completeData && completeData.length > 0) {
                console.log(`‚≠ê ULTRA-OTIMIZADO: ${completeData.length} produtos com pre√ßos obtidos em uma √∫nica query!`);
                
                // Converter para formato esperado
                const optimizedProducts = completeData.map(item => {
                    const product = {
                        id: item.product_id,
                        name: item.product_name,
                        category: item.product_category,
                        website: item.product_website,
                        product_link: item.product_link,
                        is_hidden: item.is_hidden,
                        hidden_reason: item.hidden_reason,
                        hidden_at: item.hidden_at,
                        currentPrice: parseFloat(item.current_price),
                        lastUpdated: item.last_checked_at || item.price_changed_at,
                        price_changed_at: item.price_changed_at
                    };
                    return product;
                }).filter(p => p.currentPrice > 0);

                // üßÆ NOVA L√ìGICA: Usar c√°lculo correto de desconto para produtos otimizados
                console.log('üìä Aplicando novo c√°lculo de desconto para produtos otimizados...');
                const productsWithHistory = await Promise.all(
                    optimizedProducts.map(async (product) => {
                        // Usar a nova fun√ß√£o de c√°lculo de desconto
                        const discountData = await calculateWeightedAverageDiscount(product.id, product.currentPrice);
                        
                        return {
                            ...product,
                            currentPrice: discountData.currentPrice,
                            weightedAverage: discountData.weightedAverage,
                            discountPercent: discountData.discountPercent,
                            hasValidHistory: discountData.hasValidHistory,
                            // Manter compatibilidade com c√≥digo existente
                            previousPrice: product.currentPrice,
                            priceChange: discountData.discountPercent
                        };
                    })
                );

                console.log(`‚úÖ OTIMIZADO: ${productsWithHistory.length} produtos processados com hist√≥rico`);
                
                setProducts(productsWithHistory);
                const promotionalProducts = await calculatePromotions(productsWithHistory);
                setTopDrops(promotionalProducts);
                console.log(`üéÜ ${promotionalProducts.length} promo√ß√µes encontradas`);
                
                await fetchSearchConfigs();
                console.log('‚úÖ Carregamento ULTRA-OTIMIZADO completo!');
                setLoading(false);
                return; // Sair da fun√ß√£o - j√° processamos tudo
            }

            console.log('‚ö†Ô∏è Fun√ß√£o ultra-otimizada n√£o dispon√≠vel, usando m√©todo padr√£o otimizado...');

            // FALLBACK: OTIMIZA√á√ÉO com RPC de pre√ßos
            const productIds = productsData.map(p => p.id);
            console.log(`üìä Buscando pre√ßos para ${productIds.length} produtos...`);
            
            let latestPricesMap = {};
            const { data: rpcPrices, error: rpcError } = await supabaseClient
                .rpc('get_latest_prices_by_products', { product_ids: productIds });

            if (!rpcError && rpcPrices) {
                console.log(`‚úÖ RPC: ${rpcPrices.length} pre√ßos obtidos via fun√ß√£o otimizada`);
                rpcPrices.forEach(price => {
                    latestPricesMap[price.product_id] = {
                        price: parseFloat(price.price),
                        price_changed_at: price.price_changed_at,
                        last_checked_at: price.last_checked_at
                    };
                });
            } else {
                console.warn('‚ö†Ô∏è RPC de pre√ßos n√£o dispon√≠vel, usando consulta padr√£o...', rpcError?.message);
                
                // FALLBACK FINAL: buscar em lote usando IN
                const { data: batchPrices } = await supabaseClient
                    .from('prices')
                    .select('product_id, price, price_changed_at, last_checked_at')
                    .in('product_id', productIds)
                    .order('price_changed_at', { ascending: false });

                // Agrupar por product_id e pegar o mais recente
                if (batchPrices) {
                    const grouped = {};
                    batchPrices.forEach(price => {
                        if (!grouped[price.product_id]) {
                            grouped[price.product_id] = price;
                        }
                    });
                    
                    Object.entries(grouped).forEach(([productId, price]) => {
                        latestPricesMap[productId] = {
                            price: parseFloat(price.price),
                            price_changed_at: price.price_changed_at,
                            last_checked_at: price.last_checked_at
                        };
                    });
                    
                    console.log(`‚úÖ Batch: ${Object.keys(latestPricesMap).length} pre√ßos obtidos em lote`);
                }
            }

            // üßÆ NOVA L√ìGICA: Processar produtos com o c√°lculo correto de desconto
            console.log('üìä Aplicando novo c√°lculo de desconto para produtos padr√£o...');
            const productsWithPrices = await Promise.all(
                productsData.map(async (product) => {
                    const latestPrice = latestPricesMap[product.id];
                    
                    if (!latestPrice) {
                        return {
                            ...product,
                            currentPrice: 0,
                            previousPrice: 0,
                            priceChange: 0,
                            discountPercent: 0,
                            lastUpdated: null,
                            weightedAverage: 0,
                            hasValidHistory: false
                        };
                    }

                    const currentPrice = latestPrice.price;
                    const lastUpdated = latestPrice.last_checked_at || latestPrice.price_changed_at;

                    // Usar a nova fun√ß√£o de c√°lculo de desconto
                    const discountData = await calculateWeightedAverageDiscount(product.id, currentPrice);

                    return {
                        ...product,
                        currentPrice: discountData.currentPrice,
                        lastUpdated,
                        weightedAverage: discountData.weightedAverage,
                        discountPercent: discountData.discountPercent,
                        hasValidHistory: discountData.hasValidHistory,
                        // Manter compatibilidade com c√≥digo existente
                        previousPrice: currentPrice,
                        priceChange: discountData.discountPercent
                    };
                })
            );

            const validProducts = productsWithPrices.filter(p => p.currentPrice > 0);
            console.log(`‚úÖ ${validProducts.length} produtos com pre√ßos v√°lidos processados`);
            
            setProducts(validProducts);

            // Calcular promo√ß√µes usando a nova l√≥gica
            const promotionalProducts = await calculatePromotions(validProducts);
            setTopDrops(promotionalProducts);
            console.log(`üéÜ ${promotionalProducts.length} promo√ß√µes encontradas`);

            await fetchSearchConfigs();
            console.log('‚úÖ Carregamento completo!');
            setLoading(false);
        } catch (error) {
            console.error('Error fetching data:', error);
            setLoading(false);
        }
    };

    // Fun√ß√µes para gerenciar configura√ß√µes de busca
    const fetchSearchConfigs = async () => {
        try {
            const { data: configsData } = await supabaseClient
                .from('search_configs')
                .select('*')
                .order('created_at', { ascending: false });

            const configsWithKeywords = await Promise.all(
                (configsData || []).map(async (config) => {
                    const { data: keywordData } = await supabaseClient
                        .from('keyword_groups')
                        .select('keywords')
                        .eq('search_config_id', config.id);

                    return {
                        ...config,
                        keywordGroups: keywordData?.map(kg => kg.keywords) || []
                    };
                })
            );

            setSearchConfigs(configsWithKeywords);
            const activeCount = configsWithKeywords.filter(c => c.is_active).length;
            const totalCount = configsWithKeywords.length;
            setGlobalSearchToggle(activeCount === totalCount && totalCount > 0);
        } catch (error) {
            console.error('Error fetching configs:', error);
        }
    };

    const addSearchConfig = async () => {
        if (!newSearch.search_text || !newSearch.category) return;

        const validKeywordGroups = newSearch.keywordGroups.filter(g => g.trim());
        if (validKeywordGroups.length === 0) return;

        const selectedWebsites = Object.entries(newSearch.websites)
            .filter(([_, checked]) => checked)
            .map(([site]) => site);

        if (selectedWebsites.length === 0) return;

        try {
            for (const website of selectedWebsites) {
                const { data: configData } = await supabaseClient
                    .from('search_configs')
                    .insert([{
                        search_text: newSearch.search_text,
                        category: newSearch.category,
                        website: website,
                        is_active: newSearch.is_active
                    }])
                    .select();

                const keywordGroupsData = validKeywordGroups.map(group => ({
                    search_config_id: configData[0].id,
                    keywords: group
                }));

                await supabaseClient.from('keyword_groups').insert(keywordGroupsData);
            }

            setNewSearch({
                search_text: '',
                keywordGroups: [''],
                category: '',
                websites: { kabum: false, pichau: false, terabyte: false },
                is_active: true
            });
            await fetchSearchConfigs();
        } catch (error) {
            console.error('Error adding config:', error);
        }
    };

    const toggleSearchActive = async (id, currentStatus) => {
        await supabaseClient
            .from('search_configs')
            .update({ is_active: !currentStatus })
            .eq('id', id);

        setSearchConfigs(prev => prev.map(config =>
            config.id === id ? { ...config, is_active: !currentStatus } : config
        ));
    };

    const toggleAllSearches = async (newStatus) => {
        try {
            await Promise.all(
                searchConfigs.map(config =>
                    supabaseClient
                        .from('search_configs')
                        .update({ is_active: newStatus })
                        .eq('id', config.id)
                )
            );

            setSearchConfigs(prev => prev.map(config => ({
                ...config,
                is_active: newStatus
            })));

            setGlobalSearchToggle(newStatus);
        } catch (error) {
            console.error('Error toggling all searches:', error);
        }
    };

    const deleteSearchConfig = async (id) => {
        if (confirm('Remover esta configura√ß√£o?')) {
            await supabaseClient.from('search_configs').delete().eq('id', id);
            setSearchConfigs(prev => prev.filter(c => c.id !== id));
        }
    };

    const getFilteredConfigs = () => {
        let filtered = [...searchConfigs];
        if (configFilters.category) {
            filtered = filtered.filter(c => c.category === configFilters.category);
        }
        if (configFilters.website) {
            filtered = filtered.filter(c => c.website === configFilters.website);
        }
        return filtered;
    };

    // üßÆ NOVA L√ìGICA: Calcular promo√ß√µes usando o desconto correto
    const calculatePromotions = async (productsWithPrices) => {
        console.log('üéÜ Calculando promo√ß√µes com nova l√≥gica de desconto...');
        
        const promotionalProducts = productsWithPrices.map(product => {
            try {
                // Verificar se tem hist√≥rico v√°lido e desconto calc√∫lado
                if (!product.hasValidHistory || !product.weightedAverage || product.discountPercent === undefined) {
                    return {
                        ...product,
                        isPromotion: false,
                        promotionScore: 0,
                        reason: 'Sem hist√≥rico v√°lido para c√°lculo de promo√ß√£o'
                    };
                }

                const currentPrice = product.currentPrice;
                const weightedAverage = product.weightedAverage;
                const discountPercent = product.discountPercent; // Usar o desconto j√° calculado corretamente

                // Transformar discountPercent em desconto positivo (se for negativo = desconto)
                const actualDiscountPercent = discountPercent <= 0 ? Math.abs(discountPercent) : 0;

                const isSignificantDiscount = actualDiscountPercent >= 10; // M√≠nimo 10% de desconto
                const hasMinimumPrice = currentPrice >= 20; // Pre√ßo m√≠nimo de R$ 20
                const isReasonableDiscount = actualDiscountPercent <= 80; // M√°ximo 80% de desconto
                const isActualDiscount = discountPercent < 0; // Confirmar que √© desconto (negativo)

                const discountAmount = weightedAverage - currentPrice;

                const isPromotion = isSignificantDiscount &&
                    hasMinimumPrice &&
                    isReasonableDiscount &&
                    isActualDiscount &&
                    discountAmount > 0;

                const promotionScore = isPromotion ? Math.round(actualDiscountPercent) : 0;

                return {
                    ...product,
                    isPromotion,
                    promotionScore,
                    discountAmount,
                    actualDiscountPercent,
                    reason: isPromotion ? 'Desconto real detectado (nova l√≥gica)' :
                        !isActualDiscount ? `Pre√ßo atual maior que m√©dia (+${actualDiscountPercent.toFixed(1)}%)` :
                        !isSignificantDiscount ? `Desconto insuficiente (${actualDiscountPercent.toFixed(1)}%)` :
                        !hasMinimumPrice ? 'Pre√ßo muito baixo' :
                        !isReasonableDiscount ? 'Desconto suspeito' : 'Outros crit√©rios'
                };
            } catch (error) {
                console.error(`Error calculating promotion for product ${product.id}:`, error);
                return { ...product, isPromotion: false, promotionScore: 0, reason: 'Erro no c√°lculo' };
            }
        });

        const validPromotions = promotionalProducts
            .filter(p => p.isPromotion)
            .sort((a, b) => b.promotionScore - a.promotionScore)
            .slice(0, 15);

        console.log(`üéÜ ${validPromotions.length} promo√ß√µes encontradas com nova l√≥gica`);
        
        return validPromotions;
    };

    const fetchPriceHistory = async (productId, interval = '6h') => {
        try {
            let totalHours, intervalHours, expectedPoints;

            switch (interval) {
                case '1h':
                    totalHours = 24;
                    intervalHours = 1;
                    expectedPoints = 24;
                    break;
                case '6h':
                    totalHours = 144;
                    intervalHours = 6;
                    expectedPoints = 24;
                    break;
                case '1d':
                    totalHours = 720;
                    intervalHours = 24;
                    expectedPoints = 30;
                    break;
                case '1w':
                    totalHours = 2160;
                    intervalHours = 168;
                    expectedPoints = 12;
                    break;
                default:
                    totalHours = 144;
                    intervalHours = 6;
                    expectedPoints = 24;
            }

            const startDate = new Date();
            startDate.setHours(startDate.getHours() - totalHours);

            const { data } = await supabaseClient
                .from('prices')
                .select('price, collected_at, price_changed_at')
                .eq('product_id', productId)
                .gte('price_changed_at', startDate.toISOString())
                .order('price_changed_at', { ascending: true })
                .limit(expectedPoints * 2);

            if (!data || data.length === 0) {
                setPriceHistory([]);
                return;
            }

            if (data.length <= expectedPoints) {
                setPriceHistory(data);
                return;
            }

            const filteredData = [];
            const totalDataPoints = data.length;
            const step = Math.max(1, Math.floor(totalDataPoints / expectedPoints));

            for (let i = 0; i < totalDataPoints; i += step) {
                filteredData.push(data[i]);
            }

            const lastPoint = data[data.length - 1];
            const lastFilteredPoint = filteredData[filteredData.length - 1];
            if (lastPoint.price_changed_at !== lastFilteredPoint.price_changed_at) {
                filteredData.push(lastPoint);
            }

            setPriceHistory(filteredData);
        } catch (error) {
            console.error('Error fetching price history:', error);
            setPriceHistory([]);
        }
    };

    const showPriceModal = async (product) => {
        setSelectedProduct(product);
        setChartInterval('6h');
        await fetchPriceHistory(product.id, '6h');
    };

    const handleIntervalChange = async (newInterval) => {
        setChartInterval(newInterval);
        if (selectedProduct) {
            await fetchPriceHistory(selectedProduct.id, newInterval);
        }
    };

    const getSortedProducts = useMemo(() => {
        let sorted = [...products];

        if (searchTerm) {
            sorted = sorted.filter(p =>
                p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                p.category.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        if (selectedCategories.length > 0) {
            sorted = sorted.filter(p => selectedCategories.includes(p.category));
        }

        if (selectedWebsites.length > 0) {
            sorted = sorted.filter(p => selectedWebsites.includes(p.website));
        }

        sorted.sort((a, b) => {
            let comparison = 0;
            if (sortBy === 'price') {
                comparison = a.currentPrice - b.currentPrice;
            } else if (sortBy === 'category') {
                comparison = a.category.localeCompare(b.category);
            } else if (sortBy === 'drop') {
                // üßÆ NOVA L√ìGICA: Usar desconto calculado corretamente
                const getDiscount = (product) => {
                    // Se tem desconto v√°lido calculado, usar o valor absoluto (desconto positivo)
                    if (product.hasValidHistory && product.discountPercent !== undefined) {
                        return product.discountPercent <= 0 ? Math.abs(product.discountPercent) : 0;
                    }
                    return 0;
                };

                const discountA = getDiscount(a);
                const discountB = getDiscount(b);

                comparison = discountB - discountA;
            }
            return sortOrder === 'asc' ? comparison : -comparison;
        });

        return sorted;
    }, [products, searchTerm, selectedCategories, selectedWebsites, sortBy, sortOrder]);

    const allCategories = useMemo(() =>
        [...new Set(products.map(p => p.category))].sort(),
        [products]
    );

    const allWebsites = useMemo(() =>
        [...new Set(products.map(p => p.website))].sort(),
        [products]
    );

    const deleteProduct = async (id, productName) => {
        if (confirm(`Remover o produto "${productName}"?\n\nISTO IR√Å APAGAR TAMB√âM TODO O HIST√ìRICO DE PRE√áOS!`)) {
            try {
                // Toast de feedback instant√¢neo
                showInfo(`Removendo produto "${productName}"...`, 2000);
                
                await supabaseClient.from('prices').delete().eq('product_id', id);
                await supabaseClient.from('products').delete().eq('id', id);
                setProducts(prev => prev.filter(p => p.id !== id));

                if (selectedProduct && selectedProduct.id === id) {
                    setSelectedProduct(null);
                }

                console.log(`‚úÖ Produto "${productName}" e seu hist√≥rico de pre√ßos foram removidos`);
                showSuccess(`Produto "${productName}" foi removido com sucesso`);
            } catch (error) {
                console.error('Erro ao deletar produto:', error);
                showError('Erro ao deletar produto. Tente novamente.');
            }
        }
    };

    // ‚ÑπÔ∏è FUN√á√ïES PARA TOAST NOTIFICATIONS
    const addToast = (message, type = 'info', duration = 4000) => {
        const id = Date.now() + Math.random();
        const toast = { id, message, type, duration, timestamp: Date.now() };
        
        setToasts(prev => [...prev, toast]);
        
        if (duration > 0) {
            setTimeout(() => removeToast(id), duration);
        }
        
        return id;
    };
    
    const removeToast = (id) => {
        setToasts(prev => prev.filter(toast => toast.id !== id));
    };
    
    const showSuccess = (message, duration = 3000) => addToast(message, 'success', duration);
    const showError = (message, duration = 6000) => addToast(message, 'error', duration);
    const showWarning = (message, duration = 4000) => addToast(message, 'warning', duration);
    const showInfo = (message, duration = 4000) => addToast(message, 'info', duration);

    // ========================================
    // üîí FUN√á√ïES PARA SISTEMA DE OCULTA√á√ÉO (FASE 2) - COM AUTENTICA√á√ÉO
    // ========================================

    // üèÉ‚Äç‚ôÇÔ∏è FUN√á√ÉO OTIMIZADA: Oculta√ß√£o instant√¢nea + notifica√ß√µes
    const toggleProductVisibility = async (productId, currentlyHidden = false) => {
        const action = currentlyHidden ? 'show' : 'hide';
        const productName = getProductName(productId);
        
        // üöÄ OPTIMISTIC UPDATE: Atualizar UI instantaneamente
        const originalProductsState = [...products];
        const originalTopDropsState = [...topDrops];
        
        if (action === 'hide') {
            // Remover instantaneamente da UI
            setProducts(prev => prev.filter(p => p.id !== productId));
            setTopDrops(prev => prev.filter(p => p.id !== productId));
            
            // Mostrar toast de sucesso instant√¢neo
            showInfo(`Produto "${productName}" foi ocultado`, 2000);
            
            console.log(`üöÄ INSTANT√ÇNEO: Produto ${productId} removido da UI`);
        } else {
            // Para mostrar, √© mais complexo, ent√£o vamos manter o comportamento atual
            showInfo('Mostrando produto...', 2000);
        }
        
        try {
            // üì° BACKGROUND: Enviar para o banco em paralelo
            const headers = await getAuthHeaders();
            
            const response = await fetch('/api/toggle-product-visibility', {
                method: 'POST',
                headers,
                body: JSON.stringify({ productId, action })
            });
            
            const result = await response.json();
            
            if (result.success) {
                // ‚úÖ SUCESSO: Confirmar a√ß√£o
                if (action === 'show') {
                    // Para mostrar, recarregar dados para garantir consist√™ncia
                    await fetchInitialData();
                    showSuccess(`Produto "${productName}" foi exibido novamente`);
                } else {
                    // Para ocultar, j√° foi feito otimisticamente
                    showSuccess(`Produto "${productName}" foi ocultado com sucesso`);
                }
                
                // Atualizar produtos ocultos se estiver carregado
                if (hiddenProducts.length > 0) {
                    await fetchHiddenProducts();
                }
                
                console.log(`‚úÖ CONFIRMADO: ${result.message}`);
                return true;
                
            } else {
                throw new Error(result.error || 'Erro ao alterar visibilidade');
            }
            
        } catch (error) {
            console.error('‚ùå ERRO na oculta√ß√£o:', error);
            
            // üîÑ ROLLBACK: Reverter estado original em caso de erro
            if (action === 'hide') {
                console.log('üîÑ ROLLBACK: Restaurando produto na UI...');
                setProducts(originalProductsState);
                setTopDrops(originalTopDropsState);
            }
            
            // Mostrar erro com detalhes
            showError(`Erro ao ${action === 'hide' ? 'ocultar' : 'exibir'} produto: ${error.message}`);
            return false;
        }
    };
    
    // Helper para pegar nome do produto por ID
    const getProductName = (productId) => {
        const product = products.find(p => p.id === productId) || 
                       topDrops.find(p => p.id === productId) ||
                       hiddenProducts.find(p => p.id === productId);
        
        if (product) {
            const name = product.name || product.product_name || '';
            return name.length > 30 ? name.substring(0, 30) + '...' : name;
        }
        return 'Produto';
    };

    const fetchHiddenProducts = async () => {
        setLoadingHidden(true);
        try {
            const response = await fetch('/api/hidden-products');
            const result = await response.json();
            
            if (result.success) {
                setHiddenProducts(result.products || []);
            } else {
                throw new Error(result.error || 'Erro ao carregar produtos ocultos');
            }
        } catch (error) {
            console.error('Erro ao buscar produtos ocultos:', error);
            setHiddenProducts([]);
            showError(`Erro ao carregar produtos ocultos: ${error.message}`); // Toast em vez de alert
        } finally {
            setLoadingHidden(false);
        }
    };

    const fetchPriceLimits = async () => {
        try {
            const response = await fetch('/api/category-price-limits');
            const result = await response.json();
            
            if (result.success) {
                setPriceLimits(result.limits || []);
            } else {
                throw new Error(result.error || 'Erro ao carregar limites de pre√ßo');
            }
        } catch (error) {
            console.error('Erro ao buscar limites de pre√ßo:', error);
            setPriceLimits([]);
            showError(`Erro ao carregar limites de pre√ßo: ${error.message}`); // Toast em vez de alert
        }
    };

    const updatePriceLimit = async (category, maxPrice, isActive) => {
        try {
            const headers = await getAuthHeaders();
            
            // Toast de feedback instant√¢neo
            showInfo(`Salvando limite de pre√ßo para ${category.replace('_', ' ')}...`, 2000);

            const response = await fetch('/api/category-price-limits', {
                method: 'POST',
                headers,
                body: JSON.stringify({ 
                    category, 
                    max_price: maxPrice, 
                    is_active: isActive 
                })
            });

            const result = await response.json();
            
            if (result.success) {
                await fetchPriceLimits();
                // Recarregar produtos para refletir mudan√ßas de visibilidade
                await fetchInitialData();
                console.log(result.message);
                showSuccess(`Limite de pre√ßo salvo com sucesso!`);
                return true;
            } else {
                throw new Error(result.error || 'Erro ao salvar limite de pre√ßo');
            }
        } catch (error) {
            console.error('Erro ao atualizar limite de pre√ßo:', error);
            showError(`Erro ao salvar limite de pre√ßo: ${error.message}`);
            return false;
        }
    };

    const toggleAllPriceLimits = async (activate) => {
        try {
            const headers = await getAuthHeaders();
            const action = activate ? 'activate_all' : 'deactivate_all';
            
            // Toast de feedback instant√¢neo
            showInfo(`${activate ? 'Ativando' : 'Desativando'} todos os limites...`, 2000);

            const response = await fetch('/api/toggle-all-price-limits', {
                method: 'POST',
                headers,
                body: JSON.stringify({ action })
            });

            const result = await response.json();
            
            if (result.success) {
                await fetchPriceLimits();
                // Recarregar produtos para refletir mudan√ßas de visibilidade
                await fetchInitialData();
                console.log(result.message);
                showSuccess(result.message); // Toast em vez de alert
                return true;
            } else {
                throw new Error(result.error || 'Erro ao alterar todos os limites');
            }
        } catch (error) {
            console.error('Erro ao alterar todos os limites:', error);
            showError(`Erro ao alterar limites: ${error.message}`); // Toast em vez de alert
            return false;
        }
    };

    const showAllHiddenProducts = async () => {
        try {
            const headers = await getAuthHeaders();
            
            // Toast de feedback instant√¢neo
            showInfo('Mostrando todos os produtos ocultos...', 2000);

            const response = await fetch('/api/show-all-hidden-products', {
                method: 'POST',
                headers
            });

            const result = await response.json();
            
            if (result.success) {
                // Recarregar tudo para refletir mudan√ßas
                await fetchInitialData();
                await fetchHiddenProducts();
                console.log(result.message);
                showSuccess(result.message); // Toast em vez de alert
                return true;
            } else {
                throw new Error(result.error || 'Erro ao mostrar todos os produtos');
            }
        } catch (error) {
            console.error('Erro ao mostrar todos os produtos:', error);
            showError(`Erro ao mostrar produtos: ${error.message}`); // Toast em vez de alert
            return false;
        }
    };

    return {
        // States existentes
        builds,
        setBuilds,
        products,
        loading,
        searchConfigs,
        setSearchConfigs,
        topDrops,
        setTopDrops,
        selectedProduct,
        setSelectedProduct,
        priceHistory,
        chartInterval,
        sortBy,
        setSortBy,
        sortOrder,
        setSortOrder,
        searchTerm,
        setSearchTerm,
        selectedCategories,
        setSelectedCategories,
        selectedWebsites,
        setSelectedWebsites,
        expandedBuildProduct,
        setExpandedBuildProduct,
        buildProductModal,
        setBuildProductModal,
        newBuild,
        setNewBuild,
        configFilters,
        setConfigFilters,
        globalSearchToggle,
        setGlobalSearchToggle,
        newSearch,
        setNewSearch,

        // Computed values
        getSortedProducts,
        allCategories,
        allWebsites,

        // Estados para oculta√ß√£o
        showHiddenProducts,
        setShowHiddenProducts,
        hiddenProducts,
        priceLimits,
        loadingHidden,

        // Estados e fun√ß√µes para toast notifications
        toasts,
        addToast,
        removeToast,
        showSuccess,
        showError,
        showWarning,
        showInfo,

        // Functions existentes
        fetchPriceHistory,
        showPriceModal,
        handleIntervalChange,
        deleteProduct,
        fetchInitialData,

        // Fun√ß√µes para configura√ß√µes de busca
        fetchSearchConfigs,
        addSearchConfig,
        toggleSearchActive,
        toggleAllSearches,
        deleteSearchConfig,
        getFilteredConfigs,

        // Fun√ß√µes para oculta√ß√£o (com autentica√ß√£o)
        toggleProductVisibility,
        fetchHiddenProducts,
        fetchPriceLimits,
        updatePriceLimit,
        toggleAllPriceLimits,      // üÜï NOVA FUN√á√ÉO
        showAllHiddenProducts,     // üÜï NOVA FUN√á√ÉO
    };
};
