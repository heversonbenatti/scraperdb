import { useState, useCallback } from 'react';\n\nconst useToast = () => {\n  const [toasts, setToasts] = useState([]);\n\n  const addToast = useCallback((message, type = 'info', duration = 4000) => {\n    const id = Date.now() + Math.random();\n    const toast = {\n      id,\n      message,\n      type, // 'success', 'error', 'warning', 'info'\n      duration,\n      timestamp: Date.now()\n    };\n\n    setToasts(prev => [...prev, toast]);\n\n    // Auto-remove depois da duração especificada\n    if (duration > 0) {\n      setTimeout(() => {\n        removeToast(id);\n      }, duration);\n    }\n\n    return id;\n  }, []);\n\n  const removeToast = useCallback((id) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n\n  const clearAllToasts = useCallback(() => {\n    setToasts([]);\n  }, []);\n\n  // Atalhos para tipos específicos\n  const showSuccess = useCallback((message, duration) => {\n    return addToast(message, 'success', duration);\n  }, [addToast]);\n\n  const showError = useCallback((message, duration = 6000) => {\n    return addToast(message, 'error', duration);\n  }, [addToast]);\n\n  const showWarning = useCallback((message, duration) => {\n    return addToast(message, 'warning', duration);\n  }, [addToast]);\n\n  const showInfo = useCallback((message, duration) => {\n    return addToast(message, 'info', duration);\n  }, [addToast]);\n\n  return {\n    toasts,\n    addToast,\n    removeToast,\n    clearAllToasts,\n    showSuccess,\n    showError,\n    showWarning,\n    showInfo\n  };\n};\n\nexport default useToast;\n"